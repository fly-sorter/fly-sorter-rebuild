{"ast":null,"code":"import _objectSpread from \"/Users/timothyli/CodeFellows/401/fly-sorter-rebuild-v1/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//This is the only starting form of the reducer, feel free to modularize this file\nvar initialState = {\n  parts: [],\n  subAssembly: [],\n  users: [],\n  singin: {},\n  signup: {}\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case 'GETPARTS':\n      return _objectSpread({}, state, {\n        parts: payload\n      });\n\n    case 'GETSUBASSEMBLY':\n      return _objectSpread({}, state, {\n        subAssembly: payload\n      });\n\n    case 'GETUSERLIST':\n      return _objectSpread({}, state, {\n        users: payload\n      });\n\n    case 'SIGNIN':\n      return _objectSpread({}, state, {\n        signin: payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/timothyli/CodeFellows/401/fly-sorter-rebuild-v1/src/redux/reducer/reducer.js"],"names":["initialState","parts","subAssembly","users","singin","signup","state","action","type","payload","signin"],"mappings":";AAAA;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,WAAW,EAAE,EAFM;AAGnBC,EAAAA,KAAK,EAAE,EAHY;AAInBC,EAAAA,MAAM,EAAE,EAJW;AAKnBC,EAAAA,MAAM,EAAE;AALW,CAArB;AAQA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;AAAA,MACzCC,IADyC,GACvBD,MADuB,CACzCC,IADyC;AAAA,MACnCC,OADmC,GACvBF,MADuB,CACnCE,OADmC;;AAG/C,UAAQD,IAAR;AACE,SAAK,UAAL;AACE,+BAAYF,KAAZ,EAAsB;AAAEL,QAAAA,KAAK,EAAEQ;AAAT,OAAtB;;AAEF,SAAK,gBAAL;AACE,+BAAYH,KAAZ,EAAsB;AAAEJ,QAAAA,WAAW,EAAEO;AAAf,OAAtB;;AAEF,SAAK,aAAL;AACE,+BAAYH,KAAZ,EAAsB;AAAEH,QAAAA,KAAK,EAAEM;AAAT,OAAtB;;AAEF,SAAK,QAAL;AACE,+BAAYH,KAAZ,EAAsB;AAAEI,QAAAA,MAAM,EAAED;AAAV,OAAtB;;AAEF;AACE,aAAOH,KAAP;AAdJ;AAgBD,CAnBD","sourcesContent":["//This is the only starting form of the reducer, feel free to modularize this file\n\nconst initialState = {\n  parts: [],\n  subAssembly: [],\n  users: [],\n  singin: {},\n  signup: {}\n};\n\nexport default (state = initialState, action) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case 'GETPARTS':\n      return { ...state, ...{ parts: payload } };\n\n    case 'GETSUBASSEMBLY':\n      return { ...state, ...{ subAssembly: payload } };\n\n    case 'GETUSERLIST':\n      return { ...state, ...{ users: payload } };\n\n    case 'SIGNIN':\n      return { ...state, ...{ signin: payload } };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}